{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport class LoginGuard {\n  constructor(authService, toastrService, router) {\n    this.authService = authService;\n    this.toastrService = toastrService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate([\"login\"]);\n      this.toastrService.info(\"You should log in.\");\n      return false;\n    }\n  }\n}\nLoginGuard.ɵfac = function LoginGuard_Factory(t) {\n  return new (t || LoginGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\nLoginGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginGuard,\n  factory: LoginGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AASA,OAAM,MAAOA,UAAU;EAErBC,YAAoBC,WAAuB,EAAUC,aAA2B,EAAUC,MAAa;IAAnF,gBAAW,GAAXF,WAAW;IAAsB,kBAAa,GAAbC,aAAa;IAAwB,WAAM,GAANC,MAAM;EAEhG;EAEAC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IACxB,IAAG,IAAI,CAACL,WAAW,CAACM,eAAe,EAAE,EAAC;MACpC,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/B,IAAI,CAACN,aAAa,CAACO,IAAI,CAAC,oBAAoB,CAAC;MAC7C,OAAO,KAAK;;EAEhB;;AAhBSV,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAW,SAAVX,UAAU;EAAAY,YAFT;AAAM","names":["LoginGuard","constructor","authService","toastrService","router","canActivate","route","state","isAuthenticated","navigate","info","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Mert\\frontEndProjects\\exampleProject\\src\\app\\guards\\login.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginGuard implements CanActivate {\n\n  constructor(private authService:AuthService, private toastrService:ToastrService, private router:Router) {\n    \n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      if(this.authService.isAuthenticated()){\n        return true;\n      } else {\n        this.router.navigate([\"login\"]);\n        this.toastrService.info(\"You should log in.\");\n        return false;\n      }\n    }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}