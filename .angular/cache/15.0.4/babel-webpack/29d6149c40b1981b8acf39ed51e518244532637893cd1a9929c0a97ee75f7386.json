{"ast":null,"code":"import { catchError, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport class HttpRequestInterceptor {\n  constructor(authService, toastrService, router) {\n    this.authService = authService;\n    this.toastrService = toastrService;\n    this.router = router;\n    this.reSendRequest = request => {\n      if (localStorage.getItem(\"accessToken\")) {\n        console.log(localStorage.getItem(\"accessToken\"));\n        request = request.clone({\n          headers: request.headers.set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"))\n        });\n      }\n      console.log(request);\n      return request;\n    };\n  }\n  intercept(request, next) {\n    let accessToken = localStorage.getItem(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n    return next.handle(request).pipe(catchError(error => {\n      if (error.status === 403) {\n        if (accessToken) localStorage.removeItem(\"accessToken\");\n        if (refreshToken) localStorage.removeItem(\"refreshToken\");\n        this.router.navigate([\"login\"]);\n        this.toastrService.info(\"You should log in.\");\n        return next.handle(request);\n      }\n      if (refreshToken != null && error.status === 401) {\n        return this.authService.refreshToken(refreshToken).pipe(switchMap(res => {\n          localStorage.setItem(\"accessToken\", res.accessToken);\n          localStorage.setItem(\"refreshToken\", res.refreshToken);\n          return next.handle(this.reSendRequest(request));\n        }));\n      }\n      return next.handle(this.reSendRequest(request));\n    }));\n  }\n}\nHttpRequestInterceptor.ɵfac = function HttpRequestInterceptor_Factory(t) {\n  return new (t || HttpRequestInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\nHttpRequestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpRequestInterceptor,\n  factory: HttpRequestInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAQA,SAASA,UAAU,EAAcC,SAAS,QAAoB,MAAM;;;;;AAOpE,OAAM,MAAOC,sBAAsB;EAEjCC,YAAoBC,WAAwB,EAAUC,aAA4B,EAAUC,MAAc;IAAtF,gBAAW,GAAXF,WAAW;IAAuB,kBAAa,GAAbC,aAAa;IAAyB,WAAM,GAANC,MAAM;IA6BlG,kBAAa,GAAIC,OAAyB,IAAsB;MAChE,IAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,EAAC;QACnCC,OAAO,CAACC,GAAG,CAACH,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;QAChDF,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;UACtBC,OAAO,EAAEN,OAAO,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAC,SAAS,GAAGN,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;SAC7F,CAAC;;MAEJC,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;MACpB,OAAOA,OAAO;IACjB,CAAC;EAtC8G;EAE9GQ,SAAS,CAACR,OAA6B,EAAES,IAAiB;IACxD,IAAIC,WAAW,GAAGT,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACrD,IAAIS,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAEvD,OAAOO,IAAI,CAACG,MAAM,CAACZ,OAAO,CAAC,CAACa,IAAI,CAC9BpB,UAAU,CAAEqB,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,IAAIL,WAAW,EAAET,YAAY,CAACe,UAAU,CAAC,aAAa,CAAC;QACvD,IAAIL,YAAY,EAAEV,YAAY,CAACe,UAAU,CAAC,cAAc,CAAC;QACzD,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;QAC/B,IAAI,CAACnB,aAAa,CAACoB,IAAI,CAAC,oBAAoB,CAAC;QAC7C,OAAOT,IAAI,CAACG,MAAM,CAACZ,OAAO,CAAC;;MAE7B,IAAIW,YAAY,IAAI,IAAI,IAAIG,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QAChD,OAAO,IAAI,CAAClB,WAAW,CAACc,YAAY,CAACA,YAAY,CAAC,CAACE,IAAI,CACrDnB,SAAS,CAAEyB,GAA0B,IAAI;UACvClB,YAAY,CAACmB,OAAO,CAAC,aAAa,EAAED,GAAG,CAACT,WAAW,CAAC;UACpDT,YAAY,CAACmB,OAAO,CAAC,cAAc,EAAED,GAAG,CAACR,YAAY,CAAC;UACtD,OAAOF,IAAI,CAACG,MAAM,CAAC,IAAI,CAACS,aAAa,CAACrB,OAAO,CAAC,CAAC;QACjD,CAAC,CAAC,CACH;;MAGH,OAAOS,IAAI,CAACG,MAAM,CAAC,IAAI,CAACS,aAAa,CAACrB,OAAO,CAAC,CAAC;IACjD,CAAC,CAAC,CACH;EACH;;AA9BWL,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAA2B,SAAtB3B,sBAAsB;AAAA","names":["catchError","switchMap","HttpRequestInterceptor","constructor","authService","toastrService","router","request","localStorage","getItem","console","log","clone","headers","set","intercept","next","accessToken","refreshToken","handle","pipe","error","status","removeItem","navigate","info","res","setItem","reSendRequest","factory"],"sourceRoot":"","sources":["C:\\Users\\Mert\\frontEndProjects\\exampleProject\\src\\app\\interceptors\\http-request.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { catchError, Observable, switchMap, throwError } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router } from '@angular/router';\nimport { AuthenticationResponse } from '../models/authenticationResponse';\n\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService, private toastrService: ToastrService, private router: Router) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    let accessToken = localStorage.getItem(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 403) {\n          if (accessToken) localStorage.removeItem(\"accessToken\");\n          if (refreshToken) localStorage.removeItem(\"refreshToken\");\n          this.router.navigate([\"login\"]);\n          this.toastrService.info(\"You should log in.\");\n          return next.handle(request);\n        }\n        if (refreshToken != null && error.status === 401) {\n          return this.authService.refreshToken(refreshToken).pipe(\n            switchMap((res:AuthenticationResponse) => {\n              localStorage.setItem(\"accessToken\", res.accessToken);\n              localStorage.setItem(\"refreshToken\", res.refreshToken);\n              return next.handle(this.reSendRequest(request));\n            })\n          )\n        } \n        \n        return next.handle(this.reSendRequest(request));\n      })\n    );\n  }\n  reSendRequest = (request: HttpRequest<any>): HttpRequest<any> => {\n\t\tif(localStorage.getItem(\"accessToken\")){\n      console.log(localStorage.getItem(\"accessToken\"))\n      request = request.clone({\n        headers: request.headers.set(\"Authorization\",\"Bearer \" + localStorage.getItem(\"accessToken\"))\n      })\n    }\n    console.log(request)\n    return request;\n\t};\n\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}