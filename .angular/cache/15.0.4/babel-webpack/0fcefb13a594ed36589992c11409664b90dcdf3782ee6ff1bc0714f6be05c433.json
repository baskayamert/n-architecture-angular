{"ast":null,"code":"import { catchError, switchMap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport class HttpRequestInterceptor {\n  constructor(authService, toastrService, router) {\n    this.authService = authService;\n    this.toastrService = toastrService;\n    this.router = router;\n    this.reSendRequest = request => {\n      if (this._currentUserService.AccessToken) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${this._currentUserService.AccessToken}`,\n            'X-SessionId': this._currentUserService.SessionId\n          }\n        });\n      }\n      return request;\n    };\n  }\n  intercept(request, next) {\n    let accessToken = localStorage.getItem(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n    return next.handle(request).pipe(catchError(error => {\n      if (error.status === 403) {\n        if (accessToken) localStorage.removeItem(\"accessToken\");\n        if (refreshToken) localStorage.removeItem(\"refreshToken\");\n        this.router.navigate([\"login\"]);\n        this.toastrService.info(\"You should log in.\");\n        return next.handle(request);\n      }\n      if (refreshToken != null && error.status === 401) {\n        return this.authService.refreshToken(refreshToken).pipe(switchMap(res => {\n          localStorage.setItem(\"accessToken\", res.accessToken);\n          localStorage.setItem(\"refreshToken\", res.refreshToken);\n          return next.handle(request);\n        }));\n      }\n      return throwError(() => error);\n    }));\n  }\n}\nHttpRequestInterceptor.ɵfac = function HttpRequestInterceptor_Factory(t) {\n  return new (t || HttpRequestInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\nHttpRequestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpRequestInterceptor,\n  factory: HttpRequestInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAQA,SAASA,UAAU,EAAcC,SAAS,EAAEC,UAAU,QAAQ,MAAM;;;;;AAOpE,OAAM,MAAOC,sBAAsB;EAEjCC,YAAoBC,WAAwB,EAAUC,aAA4B,EAAUC,MAAc;IAAtF,gBAAW,GAAXF,WAAW;IAAuB,kBAAa,GAAbC,aAAa;IAAyB,WAAM,GAANC,MAAM;IA6BlG,kBAAa,GAAIC,OAAyB,IAAsB;MAChE,IAAI,IAAI,CAACC,mBAAmB,CAACC,WAAW,EAAE;QACzCF,OAAO,GAAGA,OAAO,CAACG,KAAK,CAAC;UACvBC,UAAU,EAAE;YACXC,aAAa,EAAE,UAAU,IAAI,CAACJ,mBAAmB,CAACC,WAAW,EAAE;YAC/D,aAAa,EAAE,IAAI,CAACD,mBAAmB,CAACK;;SAEzC,CAAC;;MAEH,OAAON,OAAO;IACf,CAAC;EAvC8G;EAE9GO,SAAS,CAACP,OAA6B,EAAEQ,IAAiB;IACxD,IAAIC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACrD,IAAIC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAEvD,OAAOH,IAAI,CAACK,MAAM,CAACb,OAAO,CAAC,CAACc,IAAI,CAC9BtB,UAAU,CAAEuB,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,IAAIP,WAAW,EAAEC,YAAY,CAACO,UAAU,CAAC,aAAa,CAAC;QACvD,IAAIL,YAAY,EAAEF,YAAY,CAACO,UAAU,CAAC,cAAc,CAAC;QACzD,IAAI,CAAClB,MAAM,CAACmB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;QAC/B,IAAI,CAACpB,aAAa,CAACqB,IAAI,CAAC,oBAAoB,CAAC;QAC7C,OAAOX,IAAI,CAACK,MAAM,CAACb,OAAO,CAAC;;MAE7B,IAAIY,YAAY,IAAI,IAAI,IAAIG,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QAChD,OAAO,IAAI,CAACnB,WAAW,CAACe,YAAY,CAACA,YAAY,CAAC,CAACE,IAAI,CACrDrB,SAAS,CAAE2B,GAA0B,IAAI;UACvCV,YAAY,CAACW,OAAO,CAAC,aAAa,EAAED,GAAG,CAACX,WAAW,CAAC;UACpDC,YAAY,CAACW,OAAO,CAAC,cAAc,EAAED,GAAG,CAACR,YAAY,CAAC;UACtD,OAAOJ,IAAI,CAACK,MAAM,CAACb,OAAO,CAAC;QAC7B,CAAC,CAAC,CACH;;MAGH,OAAON,UAAU,CAAC,MAAMqB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;;AA9BWpB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAA2B,SAAtB3B,sBAAsB;AAAA","names":["catchError","switchMap","throwError","HttpRequestInterceptor","constructor","authService","toastrService","router","request","_currentUserService","AccessToken","clone","setHeaders","Authorization","SessionId","intercept","next","accessToken","localStorage","getItem","refreshToken","handle","pipe","error","status","removeItem","navigate","info","res","setItem","factory"],"sourceRoot":"","sources":["C:\\Users\\Mert\\frontEndProjects\\exampleProject\\src\\app\\interceptors\\http-request.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { catchError, Observable, switchMap, throwError } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router } from '@angular/router';\nimport { AuthenticationResponse } from '../models/authenticationResponse';\n\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService, private toastrService: ToastrService, private router: Router) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    let accessToken = localStorage.getItem(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 403) {\n          if (accessToken) localStorage.removeItem(\"accessToken\");\n          if (refreshToken) localStorage.removeItem(\"refreshToken\");\n          this.router.navigate([\"login\"]);\n          this.toastrService.info(\"You should log in.\");\n          return next.handle(request);\n        }\n        if (refreshToken != null && error.status === 401) {\n          return this.authService.refreshToken(refreshToken).pipe(\n            switchMap((res:AuthenticationResponse) => {\n              localStorage.setItem(\"accessToken\", res.accessToken);\n              localStorage.setItem(\"refreshToken\", res.refreshToken);\n              return next.handle(request);\n            })\n          )\n        } \n        \n        return throwError(() => error);\n      })\n    );\n  }\n  reSendRequest = (request: HttpRequest<any>): HttpRequest<any> => {\n\t\tif (this._currentUserService.AccessToken) {\n\t\t\trequest = request.clone({\n\t\t\t\tsetHeaders: {\n\t\t\t\t\tAuthorization: `Bearer ${this._currentUserService.AccessToken}`,\n\t\t\t\t\t'X-SessionId': this._currentUserService.SessionId,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\treturn request;\n\t};\n\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}