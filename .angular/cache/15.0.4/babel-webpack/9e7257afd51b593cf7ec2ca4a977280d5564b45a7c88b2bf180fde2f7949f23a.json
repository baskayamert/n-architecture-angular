{"ast":null,"code":"import { catchError, switchMap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport class HttpRequestInterceptor {\n  constructor(authService, toastrService, router) {\n    this.authService = authService;\n    this.toastrService = toastrService;\n    this.router = router;\n    this.isAccessTokenSucceeded = true;\n    this.reSendRequest = request => {\n      if (localStorage.getItem(\"accessToken\")) {\n        request = request.clone({\n          headers: request.headers.set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"))\n        });\n      }\n      return request;\n    };\n  }\n  intercept(request, next) {\n    let accessToken = localStorage.getItem(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n    return next.handle(request).pipe(catchError(error => {\n      if (!this.isAccessTokenSucceeded && error.status === 403) {\n        if (accessToken) localStorage.removeItem(\"accessToken\");\n        if (refreshToken) localStorage.removeItem(\"refreshToken\");\n        this.isAccessTokenSucceeded = false;\n        this.router.navigate([\"login\"]);\n        this.toastrService.info(\"You should log in.\");\n        return next.handle(request);\n      } else if (this.isAccessTokenSucceeded && error.status === 403) {} else if (refreshToken != null && error.status === 401) {\n        return this.authService.refreshToken(refreshToken).pipe(switchMap(res => {\n          localStorage.setItem(\"accessToken\", res.accessToken);\n          localStorage.setItem(\"refreshToken\", res.refreshToken);\n          this.isAccessTokenSucceeded = true;\n          return next.handle(this.reSendRequest(request));\n        }), catchError(error => {\n          return throwError(error);\n        }));\n      } else return throwError(error);\n    }));\n  }\n}\nHttpRequestInterceptor.ɵfac = function HttpRequestInterceptor_Factory(t) {\n  return new (t || HttpRequestInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\nHttpRequestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpRequestInterceptor,\n  factory: HttpRequestInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAQA,SAA0BA,UAAU,EAAcC,SAAS,EAAEC,UAAU,QAAQ,MAAM;;;;;AAOrF,OAAM,MAAOC,sBAAsB;EAGjCC,YAAoBC,WAAwB,EAAUC,aAA4B,EAAUC,MAAc;IAAtF,gBAAW,GAAXF,WAAW;IAAuB,kBAAa,GAAbC,aAAa;IAAyB,WAAM,GAANC,MAAM;IAF1F,2BAAsB,GAAY,IAAI;IAwC9C,kBAAa,GAAIC,OAAyB,IAAsB;MAChE,IAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,EAAC;QACnCF,OAAO,GAAGA,OAAO,CAACG,KAAK,CAAC;UACtBC,OAAO,EAAEJ,OAAO,CAACI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAC,SAAS,GAAGJ,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;SAC7F,CAAC;;MAEJ,OAAOF,OAAO;IACjB,CAAC;EA7C8G;EAE9GM,SAAS,CAACN,OAA6B,EAAEO,IAAiB;IACxD,IAAIC,WAAW,GAAGP,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACrD,IAAIO,YAAY,GAAGR,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAEvD,OAAOK,IAAI,CAACG,MAAM,CAACV,OAAO,CAAC,CAACW,IAAI,CAC9BnB,UAAU,CAAEoB,KAAwB,IAAI;MACtC,IAAI,CAAC,IAAI,CAACC,sBAAsB,IAAID,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;QACxD,IAAIN,WAAW,EAAEP,YAAY,CAACc,UAAU,CAAC,aAAa,CAAC;QACvD,IAAIN,YAAY,EAAER,YAAY,CAACc,UAAU,CAAC,cAAc,CAAC;QACzD,IAAI,CAACF,sBAAsB,GAAG,KAAK;QACnC,IAAI,CAACd,MAAM,CAACiB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;QAC/B,IAAI,CAAClB,aAAa,CAACmB,IAAI,CAAC,oBAAoB,CAAC;QAC7C,OAAOV,IAAI,CAACG,MAAM,CAACV,OAAO,CAAC;OAC5B,MACI,IAAI,IAAI,CAACa,sBAAsB,IAAID,KAAK,CAACE,MAAM,KAAK,GAAG,EAAC,EAE5D,MACI,IAAIL,YAAY,IAAI,IAAI,IAAIG,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;QACrD,OAAO,IAAI,CAACjB,WAAW,CAACY,YAAY,CAACA,YAAY,CAAC,CACjDE,IAAI,CACHlB,SAAS,CAAEyB,GAA0B,IAAI;UACvCjB,YAAY,CAACkB,OAAO,CAAC,aAAa,EAAED,GAAG,CAACV,WAAW,CAAC;UACpDP,YAAY,CAACkB,OAAO,CAAC,cAAc,EAAED,GAAG,CAACT,YAAY,CAAC;UACtD,IAAI,CAACI,sBAAsB,GAAG,IAAI;UAClC,OAAON,IAAI,CAACG,MAAM,CAAC,IAAI,CAACU,aAAa,CAACpB,OAAO,CAAC,CAAC;QACjD,CAAC,CAAC,EACFR,UAAU,CAAEoB,KAAK,IAAI;UACnB,OAAOlB,UAAU,CAACkB,KAAK,CAAC;QAC1B,CAAC,CAAC,CACH;OACF,MAEC,OAAOlB,UAAU,CAACkB,KAAK,CAAC;IAC5B,CAAC,CAAC,CACH;EACH;;AAxCWjB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAA0B,SAAtB1B,sBAAsB;AAAA","names":["catchError","switchMap","throwError","HttpRequestInterceptor","constructor","authService","toastrService","router","request","localStorage","getItem","clone","headers","set","intercept","next","accessToken","refreshToken","handle","pipe","error","isAccessTokenSucceeded","status","removeItem","navigate","info","res","setItem","reSendRequest","factory"],"sourceRoot":"","sources":["C:\\Users\\Mert\\frontEndProjects\\exampleProject\\src\\app\\interceptors\\http-request.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { BehaviorSubject, catchError, Observable, switchMap, throwError } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router } from '@angular/router';\nimport { AuthenticationResponse } from '../models/authenticationResponse';\n\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n  private isAccessTokenSucceeded: boolean = true;\n\n  constructor(private authService: AuthService, private toastrService: ToastrService, private router: Router) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    let accessToken = localStorage.getItem(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (!this.isAccessTokenSucceeded && error.status === 403) {\n          if (accessToken) localStorage.removeItem(\"accessToken\");\n          if (refreshToken) localStorage.removeItem(\"refreshToken\");\n          this.isAccessTokenSucceeded = false;\n          this.router.navigate([\"login\"]);\n          this.toastrService.info(\"You should log in.\");\n          return next.handle(request);\n        }\n        else if (this.isAccessTokenSucceeded && error.status === 403){\n\n        }\n        else if (refreshToken != null && error.status === 401) {\n          return this.authService.refreshToken(refreshToken)\n          .pipe(\n            switchMap((res:AuthenticationResponse) => {\n              localStorage.setItem(\"accessToken\", res.accessToken);\n              localStorage.setItem(\"refreshToken\", res.refreshToken);\n              this.isAccessTokenSucceeded = true;\n              return next.handle(this.reSendRequest(request));\n            }),\n            catchError((error) => {\n              return throwError(error)\n            })\n          )\n        } \n        else\n          return throwError(error);\n      })\n    );\n  }\n  reSendRequest = (request: HttpRequest<any>): HttpRequest<any> => {\n\t\tif(localStorage.getItem(\"accessToken\")){\n      request = request.clone({\n        headers: request.headers.set(\"Authorization\",\"Bearer \" + localStorage.getItem(\"accessToken\"))\n      })\n    }\n    return request;\n\t};\n\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}