{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.apiUrl = \"https://localhost:7126/api/Auth/\";\n  }\n  login(user) {\n    let newUrl = this.apiUrl + \"login\";\n    return this.httpClient.post(newUrl, user);\n  }\n  refreshToken(refreshToken) {\n    let newUrl = this.apiUrl + \"refreshtoken?refreshToken=\" + refreshToken;\n    return this.httpClient.post(newUrl);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,WAAW;EAKtBC,YAAoBC,UAAqB;IAArB,eAAU,GAAVA,UAAU;IAH9B,WAAM,GAAG,kCAAkC;EAGE;EAE7CC,KAAK,CAACC,IAAiB;IACrB,IAAIC,MAAM,GAAG,IAAI,CAACC,MAAM,GAAG,OAAO;IAClC,OAAO,IAAI,CAACJ,UAAU,CAACK,IAAI,CAAyBF,MAAM,EAAED,IAAI,CAAC;EACnE;EAEAI,YAAY,CAACA,YAAmB;IAC9B,IAAIH,MAAM,GAAG,IAAI,CAACC,MAAM,GAAG,4BAA4B,GAAGE,YAAY;IACtE,OAAO,IAAI,CAACN,UAAU,CAACK,IAAI,CAAMF,MAAM,CAAC;EAC1C;;AAfWL,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAS,SAAXT,WAAW;EAAAU,YAFV;AAAM","names":["AuthService","constructor","httpClient","login","user","newUrl","apiUrl","post","refreshToken","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Mert\\frontEndProjects\\exampleProject\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthenticationResponse } from '../models/authenticationResponse';\nimport { UserLoginDto } from '../models/DTOs/UserDtos/UserLoginDto';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  apiUrl = \"https://localhost:7126/api/Auth/\";\n\n\n  constructor(private httpClient:HttpClient) { }\n\n  login(user:UserLoginDto) : Observable<AuthenticationResponse>{\n    let newUrl = this.apiUrl + \"login\";\n    return this.httpClient.post<AuthenticationResponse>(newUrl, user);\n  }\n\n  refreshToken(refreshToken:string) : Observable<any>{\n    let newUrl = this.apiUrl + \"refreshtoken?refreshToken=\" + refreshToken;\n    return this.httpClient.post<any>(newUrl);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}