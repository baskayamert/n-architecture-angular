{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@auth0/angular-jwt\";\nimport * as i2 from \"../services/auth.service\";\nexport class TokenHandlerInterceptor {\n  constructor(jwtHelperService, authService) {\n    this.jwtHelperService = jwtHelperService;\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    let accessToken = localStorage.getItem(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n    if (accessToken == null || refreshToken == null) {\n      return next.handle(request);\n    }\n    var refreshTokenExpirationDate = this.jwtHelperService.getTokenExpirationDate(refreshToken);\n    if (this.jwtHelperService.isTokenExpired(accessToken) && this.jwtHelperService.isTokenExpired(refreshToken)) {\n      return next.handle(request);\n    } else if (refreshTokenExpirationDate != undefined && refreshTokenExpirationDate?.getMinutes() >= new Date(Date.now()).getMinutes() * 95 / 100) {\n      this.authService.refreshToken(refreshToken).subscribe(res => {\n        localStorage.setItem(\"accessToken\", res.accessToken);\n        localStorage.setItem(\"refreshToken\", res.refreshToken);\n      });\n    } else if (this.jwtHelperService.isTokenExpired(accessToken)) {\n      this.authService.refreshToken(refreshToken).subscribe(res => {\n        localStorage.setItem(\"accessToken\", res.accessToken);\n        localStorage.setItem(\"refreshToken\", res.refreshToken);\n      });\n    }\n    return next.handle(request);\n  }\n}\nTokenHandlerInterceptor.ɵfac = function TokenHandlerInterceptor_Factory(t) {\n  return new (t || TokenHandlerInterceptor)(i0.ɵɵinject(i1.JwtHelperService), i0.ɵɵinject(i2.AuthService));\n};\nTokenHandlerInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenHandlerInterceptor,\n  factory: TokenHandlerInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;;AAYA,OAAM,MAAOA,uBAAuB;EAElCC,YAAoBC,gBAAkC,EAAUC,WAAwB;IAApE,qBAAgB,GAAhBD,gBAAgB;IAA4B,gBAAW,GAAXC,WAAW;EAAiB;EAE5FC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IAExD,IAAIC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACrD,IAAIC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAEvD,IAAIF,WAAW,IAAI,IAAI,IAAIG,YAAY,IAAI,IAAI,EAAE;MAC/C,OAAOJ,IAAI,CAACK,MAAM,CAACN,OAAO,CAAC;;IAG7B,IAAIO,0BAA0B,GAAG,IAAI,CAACV,gBAAgB,CAACW,sBAAsB,CAACH,YAAY,CAAC;IAE3F,IAAI,IAAI,CAACR,gBAAgB,CAACY,cAAc,CAACP,WAAW,CAAC,IAAI,IAAI,CAACL,gBAAgB,CAACY,cAAc,CAACJ,YAAY,CAAC,EAAE;MAC3G,OAAOJ,IAAI,CAACK,MAAM,CAACN,OAAO,CAAC;KAC5B,MAAM,IAAIO,0BAA0B,IAAIG,SAAS,IAAIH,0BAA0B,EAAEI,UAAU,EAAE,IAAK,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE,CAAC,CAAEF,UAAU,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE;MAChJ,IAAI,CAACb,WAAW,CAACO,YAAY,CAACA,YAAY,CAAC,CAACS,SAAS,CAACC,GAAG,IAAG;QAC1DZ,YAAY,CAACa,OAAO,CAAC,aAAa,EAAED,GAAG,CAACb,WAAW,CAAC;QACpDC,YAAY,CAACa,OAAO,CAAC,cAAc,EAAED,GAAG,CAACV,YAAY,CAAC;MACxD,CAAC,CAAC;KACH,MAAM,IAAI,IAAI,CAACR,gBAAgB,CAACY,cAAc,CAACP,WAAW,CAAC,EAAE;MAC5D,IAAI,CAACJ,WAAW,CAACO,YAAY,CAACA,YAAY,CAAC,CAACS,SAAS,CAACC,GAAG,IAAG;QAC1DZ,YAAY,CAACa,OAAO,CAAC,aAAa,EAAED,GAAG,CAACb,WAAW,CAAC;QACpDC,YAAY,CAACa,OAAO,CAAC,cAAc,EAAED,GAAG,CAACV,YAAY,CAAC;MACxD,CAAC,CAAC;;IAEJ,OAAOJ,IAAI,CAACK,MAAM,CAACN,OAAO,CAAC;EAC7B;;AA7BWL,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;SAAvBA,uBAAuB;EAAAsB,SAAvBtB,uBAAuB;AAAA","names":["TokenHandlerInterceptor","constructor","jwtHelperService","authService","intercept","request","next","accessToken","localStorage","getItem","refreshToken","handle","refreshTokenExpirationDate","getTokenExpirationDate","isTokenExpired","undefined","getMinutes","Date","now","subscribe","res","setItem","factory"],"sourceRoot":"","sources":["C:\\Users\\Mert\\frontEndProjects\\exampleProject\\src\\app\\interceptors\\token-handler.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class TokenHandlerInterceptor implements HttpInterceptor {\n\n  constructor(private jwtHelperService: JwtHelperService, private authService: AuthService) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n\n    let accessToken = localStorage.getItem(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n\n    if (accessToken == null || refreshToken == null) {\n      return next.handle(request);\n    }\n\n    var refreshTokenExpirationDate = this.jwtHelperService.getTokenExpirationDate(refreshToken)\n\n    if (this.jwtHelperService.isTokenExpired(accessToken) && this.jwtHelperService.isTokenExpired(refreshToken)) {\n      return next.handle(request);\n    } else if (refreshTokenExpirationDate != undefined && refreshTokenExpirationDate?.getMinutes() >= (new Date(Date.now())).getMinutes() * 95 / 100) {\n      this.authService.refreshToken(refreshToken).subscribe(res => {\n        localStorage.setItem(\"accessToken\", res.accessToken);\n        localStorage.setItem(\"refreshToken\", res.refreshToken);\n      })\n    } else if (this.jwtHelperService.isTokenExpired(accessToken)) {\n      this.authService.refreshToken(refreshToken).subscribe(res => {\n        localStorage.setItem(\"accessToken\", res.accessToken);\n        localStorage.setItem(\"refreshToken\", res.refreshToken);\n      })\n    }\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}