{"ast":null,"code":"import { catchError, switchMap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport class HttpRequestInterceptor {\n  constructor(authService, toastrService, router) {\n    this.authService = authService;\n    this.toastrService = toastrService;\n    this.router = router;\n    this.accessToken = localStorage.getItem(\"accessToken\");\n    this.refreshToken = localStorage.getItem(\"refreshToken\");\n    this.reSendRequest = request => {\n      if (this.accessToken) {\n        request = request.clone({\n          headers: request.headers.set(\"Authorization\", \"Bearer \" + this.accessToken)\n        });\n      }\n      return request;\n    };\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      if (error.status === 403) {\n        if (this.accessToken || this.refreshToken) {\n          if (this.accessToken) localStorage.removeItem(\"accessToken\");\n          if (this.refreshToken) localStorage.removeItem(\"refreshToken\");\n          if (this.refreshToken) {\n            return this.authService.refreshToken(this.refreshToken).pipe(switchMap(res => {\n              localStorage.setItem(\"accessToken\", res.accessToken);\n              localStorage.setItem(\"refreshToken\", res.refreshToken);\n              return next.handle(this.reSendRequest(request));\n            }), catchError(error => {\n              return throwError(error);\n            }));\n          }\n        }\n        this.router.navigate([\"login\"]);\n        this.toastrService.info(\"You should log in.\");\n        return next.handle(request);\n      } else if (this.refreshToken != null && error.status === 401) {\n        return this.authService.refreshToken(this.refreshToken).pipe(switchMap(res => {\n          localStorage.setItem(\"accessToken\", res.accessToken);\n          localStorage.setItem(\"refreshToken\", res.refreshToken);\n          return next.handle(this.reSendRequest(request));\n        }), catchError(error => {\n          return throwError(error);\n        }));\n      } else {\n        return throwError(error);\n      }\n    }));\n  }\n}\nHttpRequestInterceptor.ɵfac = function HttpRequestInterceptor_Factory(t) {\n  return new (t || HttpRequestInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\nHttpRequestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpRequestInterceptor,\n  factory: HttpRequestInterceptor.ɵfac\n});","map":{"version":3,"mappings":"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","names":["catchError","switchMap","throwError","HttpRequestInterceptor","constructor","authService","toastrService","router","localStorage","getItem","request","accessToken","clone","headers","set","intercept","next","handle","pipe","error","status","refreshToken","removeItem","res","setItem","reSendRequest","navigate","info","factory"],"sourceRoot":"","sources":["C:\\Users\\Mert\\frontEndProjects\\exampleProject\\src\\app\\interceptors\\http-request.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { catchError, Observable, switchMap, throwError } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router } from '@angular/router';\nimport { AuthenticationResponse } from '../models/authenticationResponse';\n\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n  accessToken = localStorage.getItem(\"accessToken\");\n  refreshToken = localStorage.getItem(\"refreshToken\");\n  constructor(private authService: AuthService, private toastrService: ToastrService, private router: Router) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    \n\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 403) {\n          if(this.accessToken || this.refreshToken) {\n            if (this.accessToken) localStorage.removeItem(\"accessToken\");\n            if (this.refreshToken) localStorage.removeItem(\"refreshToken\");\n\n            if(this.refreshToken){\n              return this.authService.refreshToken(this.refreshToken)\n              .pipe(\n                switchMap((res:AuthenticationResponse) => {\n                  localStorage.setItem(\"accessToken\", res.accessToken);\n                  localStorage.setItem(\"refreshToken\", res.refreshToken);\n                  return next.handle(this.reSendRequest(request));\n                }),\n                catchError((error) => {\n                  return throwError(error)\n                })                \n              )\n            }\n          }\n          this.router.navigate([\"login\"]);\n          this.toastrService.info(\"You should log in.\");\n          return next.handle(request);\n        }\n        else if (this.refreshToken != null && error.status === 401) {\n          return this.authService.refreshToken(this.refreshToken)\n          .pipe(\n            switchMap((res:AuthenticationResponse) => {\n              localStorage.setItem(\"accessToken\", res.accessToken);\n              localStorage.setItem(\"refreshToken\", res.refreshToken);\n              return next.handle(this.reSendRequest(request));\n            }),\n            catchError((error) => {\n              return throwError(error)\n            })\n          )\n        } \n        else{\n          return throwError(error);\n        }\n      })\n    );\n  }\n  reSendRequest = (request: HttpRequest<any>): HttpRequest<any> => {\n\t\tif(this.accessToken){\n      request = request.clone({\n        headers: request.headers.set(\"Authorization\",\"Bearer \" + this.accessToken)\n      })\n    }\n    return request;\n\t};\n\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}