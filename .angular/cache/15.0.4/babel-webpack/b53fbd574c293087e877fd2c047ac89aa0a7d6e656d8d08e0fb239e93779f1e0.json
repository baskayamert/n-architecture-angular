{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@auth0/angular-jwt\";\nexport class HttpRequestInterceptor {\n  constructor(authService, toastrService, router, jwtHelperService) {\n    this.authService = authService;\n    this.toastrService = toastrService;\n    this.router = router;\n    this.jwtHelperService = jwtHelperService;\n  }\n  intercept(request, next) {\n    let accessToken = localStorage.getItem(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n    if (refreshToken != null && accessToken != undefined && this.jwtHelperService.getTokenExpirationDate(accessToken).getSeconds() - new Date(Date.now()).getSeconds() <= 30) {\n      // when access token is about to expire in 30 seconds.\n      console.log(this.jwtHelperService.getTokenExpirationDate(accessToken).getSeconds());\n      this.authService.refreshToken(refreshToken).subscribe(res => {\n        localStorage.setItem(\"accessToken\", res.accessToken);\n        localStorage.setItem(\"refreshToken\", res.refreshToken);\n        return next.handle(request);\n      });\n    }\n    return next.handle(request).pipe(catchError(error => {\n      if (refreshToken != null && error.status === 401) {\n        this.authService.refreshToken(refreshToken).subscribe(res => {\n          localStorage.setItem(\"accessToken\", res.accessToken);\n          localStorage.setItem(\"refreshToken\", res.refreshToken);\n          return next.handle(request);\n        });\n      } else if (error.status === 403) {\n        if (accessToken) localStorage.removeItem(\"accessToken\");\n        if (refreshToken) localStorage.removeItem(\"refreshToken\");\n        this.router.navigate([\"login\"]);\n        this.toastrService.info(\"You should log in.\");\n        return next.handle(request);\n      }\n      return throwError(() => error);\n    }));\n  }\n}\nHttpRequestInterceptor.ɵfac = function HttpRequestInterceptor_Factory(t) {\n  return new (t || HttpRequestInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.JwtHelperService));\n};\nHttpRequestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpRequestInterceptor,\n  factory: HttpRequestInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAQA,SAASA,UAAU,EAAcC,UAAU,QAAQ,MAAM;;;;;;AAOzD,OAAM,MAAOC,sBAAsB;EACjCC,YAAoBC,WAAwB,EAAUC,aAA4B,EAAUC,MAAc,EAAUC,gBAAkC;IAAlI,gBAAW,GAAXH,WAAW;IAAuB,kBAAa,GAAbC,aAAa;IAAyB,WAAM,GAANC,MAAM;IAAkB,qBAAgB,GAAhBC,gBAAgB;EAAsB;EAE1JC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAIC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACrD,IAAIC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAEvD,IAAIC,YAAY,IAAI,IAAI,IAAIH,WAAW,IAAII,SAAS,IAAK,IAAI,CAACR,gBAAgB,CAACS,sBAAsB,CAACL,WAAW,CAAE,CAACM,UAAU,EAAE,GAAG,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE,CAAC,CAACF,UAAU,EAAE,IAAK,EAAE,EAAE;MAAE;MAC7KG,OAAO,CAACC,GAAG,CAAC,IAAI,CAACd,gBAAgB,CAACS,sBAAsB,CAACL,WAAW,CAAE,CAACM,UAAU,EAAE,CAAC;MACpF,IAAI,CAACb,WAAW,CAACU,YAAY,CAACA,YAAY,CAAC,CAACQ,SAAS,CAACC,GAAG,IAAG;QAC1DX,YAAY,CAACY,OAAO,CAAC,aAAa,EAAED,GAAG,CAACZ,WAAW,CAAC;QACpDC,YAAY,CAACY,OAAO,CAAC,cAAc,EAAED,GAAG,CAACT,YAAY,CAAC;QACtD,OAAOJ,IAAI,CAACe,MAAM,CAAChB,OAAO,CAAC;MAC7B,CAAC,CAAC;;IAGJ,OAAOC,IAAI,CAACe,MAAM,CAAChB,OAAO,CAAC,CAACiB,IAAI,CAC9B1B,UAAU,CAAE2B,KAAwB,IAAI;MACtC,IAAIb,YAAY,IAAI,IAAI,IAAIa,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QAChD,IAAI,CAACxB,WAAW,CAACU,YAAY,CAACA,YAAY,CAAC,CAACQ,SAAS,CAACC,GAAG,IAAG;UAC1DX,YAAY,CAACY,OAAO,CAAC,aAAa,EAAED,GAAG,CAACZ,WAAW,CAAC;UACpDC,YAAY,CAACY,OAAO,CAAC,cAAc,EAAED,GAAG,CAACT,YAAY,CAAC;UACtD,OAAOJ,IAAI,CAACe,MAAM,CAAChB,OAAO,CAAC;QAC7B,CAAC,CAAC;OACH,MAAM,IAAIkB,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QAC/B,IAAIjB,WAAW,EAAEC,YAAY,CAACiB,UAAU,CAAC,aAAa,CAAC;QACvD,IAAIf,YAAY,EAAEF,YAAY,CAACiB,UAAU,CAAC,cAAc,CAAC;QACzD,IAAI,CAACvB,MAAM,CAACwB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;QAC/B,IAAI,CAACzB,aAAa,CAAC0B,IAAI,CAAC,oBAAoB,CAAC;QAC7C,OAAOrB,IAAI,CAACe,MAAM,CAAChB,OAAO,CAAC;;MAE7B,OAAOR,UAAU,CAAC,MAAM0B,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;;AAlCWzB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAA8B,SAAtB9B,sBAAsB;AAAA","names":["catchError","throwError","HttpRequestInterceptor","constructor","authService","toastrService","router","jwtHelperService","intercept","request","next","accessToken","localStorage","getItem","refreshToken","undefined","getTokenExpirationDate","getSeconds","Date","now","console","log","subscribe","res","setItem","handle","pipe","error","status","removeItem","navigate","info","factory"],"sourceRoot":"","sources":["C:\\Users\\Mert\\frontEndProjects\\exampleProject\\src\\app\\interceptors\\http-request.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { catchError, Observable, throwError } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService, private toastrService: ToastrService, private router: Router, private jwtHelperService: JwtHelperService) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    let accessToken = localStorage.getItem(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n    \n    if (refreshToken != null && accessToken != undefined && (this.jwtHelperService.getTokenExpirationDate(accessToken)!.getSeconds() - new Date(Date.now()).getSeconds()) <= 30) { // when access token is about to expire in 30 seconds.\n      console.log(this.jwtHelperService.getTokenExpirationDate(accessToken)!.getSeconds())\n      this.authService.refreshToken(refreshToken).subscribe(res => {\n        localStorage.setItem(\"accessToken\", res.accessToken);\n        localStorage.setItem(\"refreshToken\", res.refreshToken);\n        return next.handle(request);\n      })\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (refreshToken != null && error.status === 401) {\n          this.authService.refreshToken(refreshToken).subscribe(res => {\n            localStorage.setItem(\"accessToken\", res.accessToken);\n            localStorage.setItem(\"refreshToken\", res.refreshToken);\n            return next.handle(request);\n          })\n        } else if (error.status === 403) {\n          if (accessToken) localStorage.removeItem(\"accessToken\");\n          if (refreshToken) localStorage.removeItem(\"refreshToken\");\n          this.router.navigate([\"login\"]);\n          this.toastrService.info(\"You should log in.\");\n          return next.handle(request);\n        }\n        return throwError(() => error);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}