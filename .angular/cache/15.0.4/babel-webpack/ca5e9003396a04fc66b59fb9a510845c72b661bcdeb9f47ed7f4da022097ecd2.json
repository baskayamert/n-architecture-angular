{"ast":null,"code":"import { catchError, switchMap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport class HttpRequestInterceptor {\n  constructor(authService, toastrService, router) {\n    this.authService = authService;\n    this.toastrService = toastrService;\n    this.router = router;\n  }\n  intercept(request, next) {\n    let accessToken = localStorage.getItem(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n    return next.handle(request).pipe(catchError(error => {\n      if (error.status === 403) {\n        if (accessToken) localStorage.removeItem(\"accessToken\");\n        if (refreshToken) localStorage.removeItem(\"refreshToken\");\n        this.router.navigate([\"login\"]);\n        this.toastrService.info(\"You should log in.\");\n        return next.handle(request);\n      } else if (refreshToken != null && error.status === 401) {\n        return this.authService.refreshToken(refreshToken).pipe(switchMap(res => {\n          localStorage.setItem(\"accessToken\", res.accessToken);\n          localStorage.setItem(\"refreshToken\", res.refreshToken);\n          console.log(request);\n          return next.handle(request);\n        }), catchError(error => {\n          return throwError(error);\n        }));\n      } else return next.handle(request);\n    }));\n  }\n}\nHttpRequestInterceptor.ɵfac = function HttpRequestInterceptor_Factory(t) {\n  return new (t || HttpRequestInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\nHttpRequestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpRequestInterceptor,\n  factory: HttpRequestInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAQA,SAASA,UAAU,EAAcC,SAAS,EAAEC,UAAU,QAAQ,MAAM;;;;;AAOpE,OAAM,MAAOC,sBAAsB;EAEjCC,YAAoBC,WAAwB,EAAUC,aAA4B,EAAUC,MAAc;IAAtF,gBAAW,GAAXF,WAAW;IAAuB,kBAAa,GAAbC,aAAa;IAAyB,WAAM,GAANC,MAAM;EAAY;EAE9GC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAIC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACrD,IAAIC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAEvD,OAAOH,IAAI,CAACK,MAAM,CAACN,OAAO,CAAC,CAACO,IAAI,CAC9BhB,UAAU,CAAEiB,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,IAAIP,WAAW,EAAEC,YAAY,CAACO,UAAU,CAAC,aAAa,CAAC;QACvD,IAAIL,YAAY,EAAEF,YAAY,CAACO,UAAU,CAAC,cAAc,CAAC;QACzD,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;QAC/B,IAAI,CAACd,aAAa,CAACe,IAAI,CAAC,oBAAoB,CAAC;QAC7C,OAAOX,IAAI,CAACK,MAAM,CAACN,OAAO,CAAC;OAC5B,MACI,IAAIK,YAAY,IAAI,IAAI,IAAIG,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACrD,OAAO,IAAI,CAACb,WAAW,CAACS,YAAY,CAACA,YAAY,CAAC,CACjDE,IAAI,CACHf,SAAS,CAAEqB,GAA0B,IAAI;UACvCV,YAAY,CAACW,OAAO,CAAC,aAAa,EAAED,GAAG,CAACX,WAAW,CAAC;UACpDC,YAAY,CAACW,OAAO,CAAC,cAAc,EAAED,GAAG,CAACR,YAAY,CAAC;UACtDU,OAAO,CAACC,GAAG,CAAChB,OAAO,CAAC;UAEpB,OAAOC,IAAI,CAACK,MAAM,CAACN,OAAO,CAAC;QAC7B,CAAC,CAAC,EACFT,UAAU,CAAEiB,KAAK,IAAI;UACnB,OAAOf,UAAU,CAACe,KAAK,CAAC;QAC1B,CAAC,CAAC,CACH;OACF,MAEC,OAAOP,IAAI,CAACK,MAAM,CAACN,OAAO,CAAC;IAC/B,CAAC,CAAC,CACH;EACH;;AApCWN,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAuB,SAAtBvB,sBAAsB;AAAA","names":["catchError","switchMap","throwError","HttpRequestInterceptor","constructor","authService","toastrService","router","intercept","request","next","accessToken","localStorage","getItem","refreshToken","handle","pipe","error","status","removeItem","navigate","info","res","setItem","console","log","factory"],"sourceRoot":"","sources":["C:\\Users\\Mert\\frontEndProjects\\exampleProject\\src\\app\\interceptors\\http-request.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { catchError, Observable, switchMap, throwError } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router } from '@angular/router';\nimport { AuthenticationResponse } from '../models/authenticationResponse';\n\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService, private toastrService: ToastrService, private router: Router) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    let accessToken = localStorage.getItem(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 403) {\n          if (accessToken) localStorage.removeItem(\"accessToken\");\n          if (refreshToken) localStorage.removeItem(\"refreshToken\");\n          this.router.navigate([\"login\"]);\n          this.toastrService.info(\"You should log in.\");\n          return next.handle(request);\n        }\n        else if (refreshToken != null && error.status === 401) {\n          return this.authService.refreshToken(refreshToken)\n          .pipe(\n            switchMap((res:AuthenticationResponse) => {\n              localStorage.setItem(\"accessToken\", res.accessToken);\n              localStorage.setItem(\"refreshToken\", res.refreshToken);\n              console.log(request)\n              \n              return next.handle(request);\n            }),\n            catchError((error) => {\n              return throwError(error)\n            })\n          )\n        } \n        else\n          return next.handle(request);\n      })\n    );\n  }\n\n\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}