{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport class HttpRequestInterceptor {\n  constructor(authService, toastrService, router) {\n    this.authService = authService;\n    this.toastrService = toastrService;\n    this.router = router;\n  }\n  intercept(request, next) {\n    let accessToken = localStorage.getItem(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n    request = request.clone({\n      withCredentials: true\n    });\n    return next.handle(request).pipe(catchError(error => {\n      if (refreshToken != null && error.status === 401) {\n        this.authService.refreshToken(refreshToken).subscribe(res => {\n          localStorage.setItem(\"accessToken\", res.accessToken);\n          localStorage.setItem(\"refreshToken\", res.refreshToken);\n          return next.handle(request);\n        });\n      } else if (error.status === 403) {\n        if (accessToken) localStorage.removeItem(\"accessToken\");\n        if (refreshToken) localStorage.removeItem(\"refreshToken\");\n        this.router.navigate([\"login\"]);\n        this.toastrService.info(\"You should log in.\");\n        return next.handle(request);\n      }\n      return throwError(() => error);\n    }));\n  }\n}\nHttpRequestInterceptor.ɵfac = function HttpRequestInterceptor_Factory(t) {\n  return new (t || HttpRequestInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\nHttpRequestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpRequestInterceptor,\n  factory: HttpRequestInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAQA,SAASA,UAAU,EAAcC,UAAU,QAAQ,MAAM;;;;;AAMzD,OAAM,MAAOC,sBAAsB;EACjCC,YAAoBC,WAAwB,EAASC,aAA2B,EAAUC,MAAa;IAAnF,gBAAW,GAAXF,WAAW;IAAsB,kBAAa,GAAbC,aAAa;IAAwB,WAAM,GAANC,MAAM;EAAW;EAE3GC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAIC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACrD,IAAIC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAEvDJ,OAAO,GAAGA,OAAO,CAACM,KAAK,CAAC;MACtBC,eAAe,EAAE;KAClB,CAAC;IAEF,OAAON,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC,CAACS,IAAI,CAC9BjB,UAAU,CAAEkB,KAAwB,IAAI;MACtC,IAAIL,YAAY,IAAI,IAAI,IAAIK,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QAChD,IAAI,CAACf,WAAW,CAACS,YAAY,CAACA,YAAY,CAAC,CAACO,SAAS,CAACC,GAAG,IAAG;UAC1DV,YAAY,CAACW,OAAO,CAAC,aAAa,EAAED,GAAG,CAACX,WAAW,CAAC;UACpDC,YAAY,CAACW,OAAO,CAAC,cAAc,EAAED,GAAG,CAACR,YAAY,CAAC;UACtD,OAAOJ,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;QAC7B,CAAC,CAAC;OACH,MAAM,IAAGU,KAAK,CAACC,MAAM,KAAK,GAAG,EAAC;QAC7B,IAAGT,WAAW,EAAEC,YAAY,CAACY,UAAU,CAAC,aAAa,CAAC;QACtD,IAAGV,YAAY,EAAEF,YAAY,CAACY,UAAU,CAAC,cAAc,CAAC;QACxD,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;QAC/B,IAAI,CAACnB,aAAa,CAACoB,IAAI,CAAC,oBAAoB,CAAC;QAC7C,OAAOhB,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;;MAE7B,OAAOP,UAAU,CAAC,MAAMiB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;;AA7BWhB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAwB,SAAtBxB,sBAAsB;AAAA","names":["catchError","throwError","HttpRequestInterceptor","constructor","authService","toastrService","router","intercept","request","next","accessToken","localStorage","getItem","refreshToken","clone","withCredentials","handle","pipe","error","status","subscribe","res","setItem","removeItem","navigate","info","factory"],"sourceRoot":"","sources":["C:\\Users\\Mert\\frontEndProjects\\exampleProject\\src\\app\\interceptors\\http-request.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { catchError, Observable, throwError } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService,private toastrService:ToastrService, private router:Router) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    let accessToken = localStorage.getItem(\"accessToken\");\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n\n    request = request.clone({\n      withCredentials: true,\n    });\n\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (refreshToken != null && error.status === 401) {\n          this.authService.refreshToken(refreshToken).subscribe(res => {\n            localStorage.setItem(\"accessToken\", res.accessToken);\n            localStorage.setItem(\"refreshToken\", res.refreshToken);\n            return next.handle(request);\n          })\n        } else if(error.status === 403){\n          if(accessToken) localStorage.removeItem(\"accessToken\");\n          if(refreshToken) localStorage.removeItem(\"refreshToken\");\n          this.router.navigate([\"login\"]);\n          this.toastrService.info(\"You should log in.\");\n          return next.handle(request);\n        }\n        return throwError(() => error);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}